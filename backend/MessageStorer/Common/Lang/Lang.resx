<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AliasCreation" xml:space="preserve">
    <value>Aliases can be created only from contacts (not other aliases)</value>
  </data>
  <data name="AliasNotFound" xml:space="preserve">
    <value>Alias with id {0} not found</value>
  </data>
  <data name="ApplicationNotFound" xml:space="preserve">
    <value>Application {0} not found</value>
  </data>
  <data name="AppUserContactMember" xml:space="preserve">
    <value>Message from app user can not be also from a contact member</value>
  </data>
  <data name="app_user" xml:space="preserve">
    <value>User (you)</value>
  </data>
  <data name="AttachmentNotFound" xml:space="preserve">
    <value>Attachment with id {0} not found</value>
  </data>
  <data name="Cancelled" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="ContactNotFound" xml:space="preserve">
    <value>Contact with id {0} not found</value>
  </data>
  <data name="ContactsNotFound" xml:space="preserve">
    <value>Contacts not found</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="EditNotInernalAliasName" xml:space="preserve">
    <value>Only internal aliases name's can be edited</value>
  </data>
  <data name="EmailConflict" xml:space="preserve">
    <value>User with this email exists</value>
  </data>
  <data name="EmptyFacebookName" xml:space="preserve">
    <value>Facebook username can't be empty</value>
  </data>
  <data name="EmptyPassword" xml:space="preserve">
    <value>Password can't be empty</value>
  </data>
  <data name="EmptyUsername" xml:space="preserve">
    <value>Username can't be empty</value>
  </data>
  <data name="Error_InvalidFile" xml:space="preserve">
    <value>Error - Invalid file</value>
  </data>
  <data name="Error_NoMessages" xml:space="preserve">
    <value>Error - no messages</value>
  </data>
  <data name="Error_UnknownError" xml:space="preserve">
    <value>Unknown error</value>
  </data>
  <data name="ForbiddenAlias" xml:space="preserve">
    <value>You have no access for this alias</value>
  </data>
  <data name="ForbiddenAttachment" xml:space="preserve">
    <value>You have no access for this attachment</value>
  </data>
  <data name="ForbiddenContact" xml:space="preserve">
    <value>You have no access for this contact</value>
  </data>
  <data name="ForbiddenImport" xml:space="preserve">
    <value>You have no access for this import</value>
  </data>
  <data name="ForbiddenResource" xml:space="preserve">
    <value>You can't acces this resuorce</value>
  </data>
  <data name="ImportIsBeingDeleted" xml:space="preserve">
    <value>Import is already being deleted</value>
  </data>
  <data name="ImportNotFound" xml:space="preserve">
    <value>Import with id: {0} not found</value>
  </data>
  <data name="InternalServerError" xml:space="preserve">
    <value>Internal server error</value>
  </data>
  <data name="InvalidAliasName" xml:space="preserve">
    <value>Invalid alias name</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Email is invalid</value>
  </data>
  <data name="InvalidImportStatus" xml:space="preserve">
    <value>Import has invalid status. Should be {0} but was {1}</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Password is invalid</value>
  </data>
  <data name="InvalidUsernameAndPassword" xml:space="preserve">
    <value>Invalid username or password</value>
  </data>
  <data name="messenger" xml:space="preserve">
    <value>Messenger</value>
  </data>
  <data name="MissingContactMember" xml:space="preserve">
    <value>Contact member is not a member of given contact</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="RawAliasDeletion" xml:space="preserve">
    <value>Raw aliases can't be deleted</value>
  </data>
  <data name="RawAliasModification" xml:space="preserve">
    <value>Raw aliases can't be modified</value>
  </data>
  <data name="sms" xml:space="preserve">
    <value>SMS</value>
  </data>
  <data name="StatusCreated" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="StatusNotFound" xml:space="preserve">
    <value>Status {0} not found</value>
  </data>
  <data name="StatusQueued" xml:space="preserve">
    <value>Queued</value>
  </data>
  <data name="TooLongContactInApplicationId" xml:space="preserve">
    <value>Contact InApplicationId can contain maximum of 256 characters</value>
  </data>
  <data name="TooLongContactMemberName" xml:space="preserve">
    <value>Contact member name can contain maximum of 256 characters</value>
  </data>
  <data name="TooLongContactName" xml:space="preserve">
    <value>Contact name can contain maximum of 256 characters</value>
  </data>
  <data name="TooLongFacebookName" xml:space="preserve">
    <value>Facebook usernname can contain maximum of 256 characters</value>
  </data>
  <data name="TooLongMessageContent" xml:space="preserve">
    <value>Message content can contains maximum of 307200 characters</value>
  </data>
  <data name="TooLongUsername" xml:space="preserve">
    <value>Username can't be longer than 20 characters.</value>
  </data>
  <data name="UserByEmail" xml:space="preserve">
    <value>User with email: {0} not found</value>
  </data>
  <data name="UserByIdNotFound" xml:space="preserve">
    <value>User with id: {0} not found</value>
  </data>
  <data name="UserByUsernameNotFound" xml:space="preserve">
    <value>User {0} not found</value>
  </data>
  <data name="UsernameConflict" xml:space="preserve">
    <value>User with this username exists</value>
  </data>
  <data name="UserNotLoggedInException" xml:space="preserve">
    <value>You are not logged in</value>
  </data>
  <data name="WriterTypeNotFound" xml:space="preserve">
    <value>Writer type {0} not found</value>
  </data>
</root>